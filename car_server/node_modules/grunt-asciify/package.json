{
  "name": "grunt-asciify",
  "description": "Ascii awesomizer. A Grunt task for better banners and hot logs",
  "version": "0.2.2",
  "homepage": "https://github.com/olizilla/grunt-asciify",
  "author": {
    "name": "olizilla",
    "email": "oli@zilla.org.uk",
    "url": "http://oli.zilla.org.uk"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/olizilla/grunt-asciify.git"
  },
  "bugs": {
    "url": "https://github.com/olizilla/grunt-asciify/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/olizilla/grunt-asciify/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "dependencies": {
    "asciify": "~1.3.0"
  },
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.6",
    "grunt-contrib-jshint": "~0.7.0",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt-contrib-uglify": "~0.2.2"
  },
  "keywords": [
    "gruntplugin",
    "figlet",
    "ascii",
    "art",
    "banner"
  ],
  "readme": "# grunt-asciify\n# grunt-asciify\n\nAscii awesomizer. A Grunt task for better banners and hot logs.\n\n```\n    _____     __________________  .___ .___ ________________.___.._.\n   /  _  \\   /   _____/\\_   ___ \\ |   ||   |\\_   _____/\\__  |   || |\n  /  /_\\  \\  \\_____  \\ /    \\  \\/ |   ||   | |    __)   /   |   || |\n /    |    \\ /        \\\\     \\____|   ||   | |     \\    \\____   | \\|\n \\____|__  //_______  / \\______  /|___||___| \\___  /    / ______| __\n         \\/         \\/         \\/                \\/     \\/        \\/\n```\n[![Dependency Status](https://david-dm.org/olizilla/grunt-asciify.png)](https://david-dm.org/olizilla/grunt-asciify)\n[![Build Status](https://travis-ci.org/olizilla/grunt-asciify.png)](https://travis-ci.org/olizilla/grunt-asciify)\n\nRunning the asciify task as configured below will push your awesomized text into property called `asciify_myBanner` which can then be used else where, as the template for an awesome file banner for example.\n\n```js\nasciify: {\n  myBanner: {\n    text: 'Text to asciify'\n  }\n},\nuglify:{\n  options: {\n    banner: '/*!\\n <%= asciify_myBanner %> \\n*/\\n'\n  },\n  all:{\n    src:'Gruntfile.js',\n    dest:'Gruntfile.withbanner.min.js'        \n  }\n}\n```\nAsciify picks a property name to store the output by prepending your target name with `asciify_`. In the above example we used `myBanner` as the target, so the property name became `asciify_myBanner`.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-asciify --save-dev\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-asciify');\n```\n\n## The \"asciify\" task\n\nIn your project's Gruntfile, add a section named `asciify` to the data object passed into `grunt.initConfig()`.\n\n### Options\n\n#### Default Options\n```js\noptions:{\n  font:'graffiti'\n  log:false,\n}\n```\n\n#### options.font\nType: `String`\nDefault value: `graffiti`\n\nThe name of the figlet font to use. View the [font list](https://github.com/olizilla/figlet-js/tree/master/fonts) and [examples](http://www.figlet.org/examples.html). Use the [asciify](https://npmjs.org/package/asciify) module to show all fonts for your text: `asciify -a \"All The Fonts!\"`.\n\n#### options.log\nType: `Boolean`\nDefault value: `false`\n\nWrite your asciified text to the console\n\n![asciify options.log=true](https://raw.github.com/olizilla/grunt-asciify/master/doc/grunt-asciify.png)\n\n### Usage Examples\n\n```js\ngrunt.initConfig({\n    \n  asciify: { \n    banner:{\n      text: 'GRUNT-ASCIIFY!',\n      \n      // Add the awesome to the console, and use the best font.\n      options:{ \n        font:'graffiti',\n        log:true\n      }\n    }\n  },\n\n  \n  uglify:{\n    \n    // Use the property holding our awesomised text in the banner template      \n    options: {\n      banner: '/*!\\n <%= asciify_banner %> \\n*/\\n'\n    },\n    all:{\n      src:'Gruntfile.js',\n      dest:'Grunfile.withbanner.min.js'\n    }\n  }\n});\n\ngrunt.loadNpmTasks('grunt-asciify');\ngrunt.loadNpmTasks('grunt-contrib-uglify');\n\n// Run asciify before uglify so the asciify_banner property is available.\ngrunt.registerTask('default', ['asciify', 'uglify']);\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n* 0.2.2 - ASCIIFYING TO CONSOLE NOW TRUNCATES TO FIT THE SPACE AVAILABLE\n* 0.2.1 - ASCIIFY CORE UPDATED. NO BANNERS WERE HARMED.\n* 0.2.0 - GRAFFITI BEATS STANDARD AS DEFAULT FONT. NOW DEPENDS ON THE ASCIIFY MODULE.\n* 0.1.0 - IT BEGINS. ASCII BANNERS NOW MANDTORY.\n",
  "readmeFilename": "README.md",
  "_id": "grunt-asciify@0.2.2",
  "dist": {
    "shasum": "4d88849e454054279c11e3446997344f074dcc3b",
    "tarball": "http://registry.npmjs.org/grunt-asciify/-/grunt-asciify-0.2.2.tgz"
  },
  "_from": "grunt-asciify@latest",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "olizilla",
    "email": "oli@zilla.org.uk"
  },
  "maintainers": [
    {
      "name": "olizilla",
      "email": "oli@zilla.org.uk"
    }
  ],
  "directories": {},
  "_shasum": "4d88849e454054279c11e3446997344f074dcc3b",
  "_resolved": "https://registry.npmjs.org/grunt-asciify/-/grunt-asciify-0.2.2.tgz"
}
